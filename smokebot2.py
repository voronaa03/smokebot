import os
import logging
import sqlite3
from typing import TypedDict, List, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from telegram.helpers import escape_markdown

BOT_TOKEN = os.getenv("BOT_TOKEN") or " "
admin_ids = [5601411156]
ADMIN_USERNAME = "Men_of_G"
DB_PATH = "support_bot.db"

logging.basicConfig(level=logging.INFO)

class UserState(TypedDict):
    q_index: int
    answers: List[Tuple[str, str]]
    awaiting_answer: bool

user_states: dict[int, UserState] = {}
pending_replies = {}
survey_completed = set()
allowed_retake = set()

greeting_text = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø —Å—Ç—É–¥–µ–Ω—Ç –ú–ú–ö, –ë–æ–≥–¥–∞–Ω –¢–æ–ª–∫–∞—á–µ–≤, –∏ —è –ø–∏—à—É –ø—Ä–æ–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω–∞ —Ç–µ–º—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.\n\n"
    "–Ø –∏–∑—É—á–∞—é —Ç–æ, –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è, –∏ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é.\n\n"
    "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å —ç—Ç—É —Ç–µ–º—É, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º–∏, "
    "–∏ –ø–∏—à–∏—Ç–µ –≤—Å—ë, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º ‚Äî —Ç—É—Ç –Ω–µ—Ç –º–µ–ª–æ—á–µ–π. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ "
    "(–ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ/–∞–ª–∫–æ–≥–æ–ª—å), —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ –Ω–∏—Ö ‚Äî —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ.\n\n"
    "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
)

thank_you_text = (
    "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è. –≠—Ç–æ –º–∞–ª–µ–Ω—å–∫–∏–π –≤–∫–ª–∞–¥ –≤ –±–æ–ª—å—à–æ–µ –¥–µ–ª–æ. "
    "–î–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º, –∫–∞–∫ —è –≤–µ—Ä—é, —Å–ø–∞—Å—ë—Ç –Ω–µ –º–∞–ª–æ —Å–µ–º–µ–π –æ—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è üôè"
)

questions = [
    "1Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ —Ç–æ–º –¥–Ω–µ, –∫–æ–≥–¥–∞ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –∑–∞–∫—É—Ä–∏–ª. –ß—Ç–æ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª?",
    "2Ô∏è‚É£ –ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å?",
    "3Ô∏è‚É£ –ö–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∫ —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤—É –ø—Ä–∏—à–ª–∞ –∏–¥–µ—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–∫—É—Ä–∏—Ç—å?",
    "4Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –≤ —Å–≤–æ–µ–π —Å–µ–º—å–µ: —á–∞—Å—Ç–æ –ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –¥–æ–º–∞? –ö–∞–∫ —Ç–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏?",
    "5Ô∏è‚É£ –ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —Ç–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞ –∫—É—Ä–∏—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏?",
    "6Ô∏è‚É£ –ü–æ—á–µ–º—É —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –∫—É—Ä–∏—Ç—å? –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏ —Ç–µ–±–µ —Å–µ–π—á–∞—Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ —Ç–≤–æ—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å?",
    "7Ô∏è‚É£ –ï—Å–ª–∏ –±—ã —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –ø—Ä–æ–π—Ç–∏ —Ç–µ—Ä–∞–ø–∏—é –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ, —Ç—ã –±—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å—è/–ª–∞—Å—å?"
]

def init_db():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            from_admin BOOLEAN,
            text TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def save_message(user_id: int, text: str, from_admin: bool):
    conn = sqlite3.connect(DB_PATH)
    conn.execute("INSERT INTO messages (user_id, from_admin, text) VALUES (?, ?, ?)", (user_id, from_admin, text))
    conn.commit()
    conn.close()

def get_users_with_messages():
    conn = sqlite3.connect(DB_PATH)
    rows = conn.execute("SELECT DISTINCT user_id FROM messages").fetchall()
    conn.close()
    return [r[0] for r in rows]

def get_chat_history(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    rows = conn.execute("SELECT from_admin, text, timestamp FROM messages WHERE user_id = ? ORDER BY id", (user_id,)).fetchall()
    conn.close()
    return rows

def _escape_md(text: str) -> str:
    return escape_markdown(text or "", version=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in admin_ids:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /users –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–æ–≤.")
        return
    if user_id in survey_completed and user_id not in allowed_retake:
        await update.message.reply_text("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.")
        return
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")]]
    await update.message.reply_text(greeting_text, reply_markup=InlineKeyboardMarkup(keyboard))
    save_message(user_id, update.message.text or "/start", from_admin=False)

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id in survey_completed and user_id not in allowed_retake:
        await context.bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä.")
        return
    user_states[user_id] = {"q_index": 0, "answers": [], "awaiting_answer": True}
    await context.bot.send_message(chat_id=user_id, text=questions[0])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id in admin_ids and user_id in pending_replies:
        target_id = pending_replies.pop(user_id)
        save_message(target_id, text, from_admin=True)
        await context.bot.send_message(chat_id=target_id, text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    if user_id not in user_states:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    state = user_states[user_id]
    if not state["awaiting_answer"]:
        return

    q_index = state["q_index"]
    question = questions[q_index]

    if len(state["answers"]) > q_index:
        state["answers"][q_index] = (question, text)
    else:
        state["answers"].append((question, text))

    save_message(user_id, text, from_admin=False)
    state["awaiting_answer"] = False

    user = update.effective_user
    header = f"{user.full_name} (@{user.username})" if user.username else user.full_name
    message_md = (
        f"*–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {_escape_md(header)}\n"
        f"*–í–æ–ø—Ä–æ—Å:* {_escape_md(question)}\n"
        f"*–û—Ç–≤–µ—Ç:* {_escape_md(text)}"
    )

    for admin_id in admin_ids:
        await context.bot.send_message(admin_id, message_md, parse_mode="MarkdownV2")

    buttons = []
    if q_index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_question"))
    if q_index + 1 < len(questions):
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_question"))
    else:
        buttons.append(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_survey"))

    reply_markup = InlineKeyboardMarkup([buttons])
    await context.bot.send_message(chat_id=user_id, text=questions[state["q_index"]], reply_markup=reply_markup)
    state["awaiting_answer"] = True

async def next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    state = user_states.get(uid)
    if not state or state["awaiting_answer"]:
        if state:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return
    if state["q_index"] + 1 < len(questions):
        state["q_index"] += 1
        state["awaiting_answer"] = True
        await query.edit_message_text(questions[state["q_index"]])

async def back_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    state = user_states.get(uid)
    if state and state["q_index"] > 0:
        state["q_index"] -= 1
        state["awaiting_answer"] = True
        await query.edit_message_text(questions[state["q_index"]])

async def finish_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    user_states.pop(uid, None)
    survey_completed.add(uid)
    await query.edit_message_text(thank_you_text)
    kb = [[InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")]]
    await context.bot.send_message(uid, "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º:", reply_markup=InlineKeyboardMarkup(kb))

async def users_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in admin_ids:
        return
    users = get_users_with_messages()
    if not users:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    keyboard = [[InlineKeyboardButton(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}", callback_data=f"view_{uid}")] for uid in users]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def view_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = int(query.data.split("_")[1])
    rows = get_chat_history(uid)
    lines = [f"{'üë®‚Äçüíª –ê–¥–º–∏–Ω' if from_admin else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}: {text}" for from_admin, text, _ in rows]
    text = "\n\n".join(lines) or "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    keyboard = [
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{uid}")],
        [InlineKeyboardButton("‚ôªÔ∏è –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä", callback_data=f"allow_{uid}")]
    ]
    await query.message.reply_text(f"üóÇ –ò—Å—Ç–æ—Ä–∏—è —Å {uid}:\n\n{text}", reply_markup=InlineKeyboardMarkup(keyboard))

async def prepare_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = int(query.data.split("_")[1])
    pending_replies[query.from_user.id] = uid
    await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

async def allow_retake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = int(query.data.split("_")[1])
    allowed_retake.add(uid)
    await query.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "next_question":
        await next_question(update, context)
    elif data == "back_question":
        await back_question(update, context)
    elif data == "finish_survey":
        await finish_survey(update, context)

def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("users", users_cmd))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    app.add_handler(CallbackQueryHandler(start_survey, pattern="^start_survey$"))
    app.add_handler(CallbackQueryHandler(handle_navigation, pattern="^(next_question|back_question|finish_survey)$"))
    app.add_handler(CallbackQueryHandler(view_messages, pattern="^view_"))
    app.add_handler(CallbackQueryHandler(prepare_reply, pattern="^reply_"))
    app.add_handler(CallbackQueryHandler(allow_retake, pattern="^allow_"))

    app.run_polling()

if __name__ == "__main__":
    main()